# 2 "lexer.mll"
         
        open Parser        (* The type token is defined in parser.mli *)
        exception Eof
        
# 7 "lexer.ml"
let __ocaml_lex_tables = {
  Lexing.lex_base = 
   "\000\000\235\255\236\255\237\255\238\255\239\255\240\255\241\255\
    \242\255\243\255\244\255\000\000\000\000\001\000\000\000\000\000\
    \000\000\078\000\254\255\255\255\000\000\002\000\252\255\001\000\
    \002\000\012\000\000\000\001\000\251\255\000\000\006\000\016\000\
    \002\000\012\000\000\000\000\000\000\000\008\000\249\255\001\000\
    \000\000\001\000\009\000\017\000\013\000\021\000\247\255\027\000\
    \026\000\038\000\034\000\246\255\026\000\245\255";
  Lexing.lex_backtrk = 
   "\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\011\000\011\000\011\000\011\000\011\000\
    \011\000\002\000\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\005\000\255\255\255\255\255\255\255\255\255\255\007\000\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255";
  Lexing.lex_default = 
   "\255\255\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\000\000\000\000\255\255\255\255\000\000\255\255\
    \255\255\255\255\255\255\255\255\000\000\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\000\000\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\000\000\255\255\
    \255\255\255\255\255\255\000\000\255\255\000\000";
  Lexing.lex_trans = 
   "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\019\000\018\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \019\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \005\000\004\000\000\000\000\000\003\000\000\000\000\000\000\000\
    \017\000\017\000\017\000\017\000\017\000\017\000\017\000\017\000\
    \017\000\017\000\000\000\002\000\000\000\000\000\000\000\000\000\
    \000\000\010\000\012\000\010\000\010\000\010\000\010\000\010\000\
    \010\000\010\000\010\000\010\000\016\000\014\000\010\000\010\000\
    \010\000\010\000\013\000\011\000\015\000\010\000\010\000\010\000\
    \010\000\010\000\010\000\007\000\026\000\006\000\032\000\034\000\
    \000\000\036\000\042\000\035\000\040\000\052\000\039\000\022\000\
    \027\000\020\000\028\000\031\000\037\000\038\000\021\000\029\000\
    \025\000\033\000\047\000\024\000\041\000\023\000\030\000\043\000\
    \044\000\045\000\046\000\009\000\048\000\008\000\017\000\017\000\
    \017\000\017\000\017\000\017\000\017\000\017\000\017\000\017\000\
    \049\000\050\000\051\000\053\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000";
  Lexing.lex_check = 
   "\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\000\000\000\000\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \000\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \000\000\000\000\255\255\255\255\000\000\255\255\255\255\255\255\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\255\255\000\000\255\255\255\255\255\255\255\255\
    \255\255\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\025\000\000\000\031\000\033\000\
    \255\255\035\000\041\000\034\000\039\000\011\000\013\000\021\000\
    \026\000\016\000\027\000\030\000\036\000\037\000\020\000\014\000\
    \024\000\032\000\012\000\023\000\040\000\015\000\029\000\042\000\
    \043\000\044\000\045\000\000\000\047\000\000\000\017\000\017\000\
    \017\000\017\000\017\000\017\000\017\000\017\000\017\000\017\000\
    \048\000\049\000\050\000\052\000\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \000\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255";
  Lexing.lex_base_code = 
   "";
  Lexing.lex_backtrk_code = 
   "";
  Lexing.lex_default_code = 
   "";
  Lexing.lex_trans_code = 
   "";
  Lexing.lex_check_code = 
   "";
  Lexing.lex_code = 
   "";
}

let rec token lexbuf =
    __ocaml_lex_token_rec lexbuf 0
and __ocaml_lex_token_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 7 "lexer.mll"
                           ( token lexbuf )
# 140 "lexer.ml"

  | 1 ->
# 8 "lexer.mll"
                           ( EOL )
# 145 "lexer.ml"

  | 2 ->
let
# 9 "lexer.mll"
                          lxm
# 151 "lexer.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos lexbuf.Lexing.lex_curr_pos in
# 9 "lexer.mll"
                              ( INT(int_of_string lxm) )
# 155 "lexer.ml"

  | 3 ->
# 10 "lexer.mll"
                              ( LINE )
# 160 "lexer.ml"

  | 4 ->
# 11 "lexer.mll"
                              ( TURNPHI )
# 165 "lexer.ml"

  | 5 ->
# 12 "lexer.mll"
                              ( TURN )
# 170 "lexer.ml"

  | 6 ->
# 13 "lexer.mll"
                              ( MOVENOSCALE )
# 175 "lexer.ml"

  | 7 ->
# 14 "lexer.mll"
                       ( MOVE )
# 180 "lexer.ml"

  | 8 ->
# 15 "lexer.mll"
                              ( RECTANGLE )
# 185 "lexer.ml"

  | 9 ->
# 16 "lexer.mll"
                       ( BRANCH )
# 190 "lexer.ml"

  | 10 ->
# 17 "lexer.mll"
                              ( SEQUENCE )
# 195 "lexer.ml"

  | 11 ->
let
# 18 "lexer.mll"
                         lxm
# 201 "lexer.ml"
= Lexing.sub_lexeme_char lexbuf lexbuf.Lexing.lex_start_pos in
# 18 "lexer.mll"
                              ( SYMBOL(lxm))
# 205 "lexer.ml"

  | 12 ->
# 19 "lexer.mll"
                    ( LBRACE )
# 210 "lexer.ml"

  | 13 ->
# 20 "lexer.mll"
                    ( RBRACE )
# 215 "lexer.ml"

  | 14 ->
# 21 "lexer.mll"
                           ( LSQBRACKET )
# 220 "lexer.ml"

  | 15 ->
# 22 "lexer.mll"
                    ( RSQBRACKET )
# 225 "lexer.ml"

  | 16 ->
# 23 "lexer.mll"
                           ( LPAREN )
# 230 "lexer.ml"

  | 17 ->
# 24 "lexer.mll"
                           ( RPAREN )
# 235 "lexer.ml"

  | 18 ->
# 25 "lexer.mll"
                           ( COMMA )
# 240 "lexer.ml"

  | 19 ->
# 26 "lexer.mll"
                    ( SEMICOLON )
# 245 "lexer.ml"

  | 20 ->
# 27 "lexer.mll"
                           ( raise Eof )
# 250 "lexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf; __ocaml_lex_token_rec lexbuf __ocaml_lex_state

;;

